plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.71'
    id 'java-library'
}
base {
    archivesName = "${mod_name}-neoforge-${minecraft_version}"
}
minecraft.accessTransformers.file rootProject.file('neoforge/src/main/resources/META-INF/accesstransformer.cfg')
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}
sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {
    maven { url "https://jitpack.io" }
}
jarJar.enable()
dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    implementation "com.h2database:h2:${h2_version}"
    implementation "com.moandjiezana.toml:toml4j:${toml4j_version}"
    jarJar(group: "com.h2database", name: "h2", version: "${h2_version_range}")
    jarJar(group: "com.moandjiezana.toml", name: "toml4j", version: "${toml4j_version_range}")
    compileOnly project(":common")
}
runs {
    configureEach {
        dependencies {
            runtime "com.h2database:h2:${h2_version}"
            runtime "com.moandjiezana.toml:toml4j:${toml4j_version}"
        }
    }
}
jar {
    manifest {
        attributes(
                "Specification-Version": version,
                "Implementation-Version": version
        )
    }
}
// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>
tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
}